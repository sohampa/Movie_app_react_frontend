name: Deploy Frontend to ECS

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  DOCKERHUB_REPO: sohampa/php-frontend-laravel
  ECS_CLUSTER: soham-php-laravel-app
  ECS_SERVICE: soham-php-laravel-fet-service
  ECS_TASK_FAMILY: soham-php-laravel-fet
  REACT_APP_API_URL: http://44.222.127.222:8000

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Frontend Image
        run: |
          IMAGE=${{ env.DOCKERHUB_REPO }}:${{ github.sha }}
          docker build --build-arg REACT_APP_API_URL=${{ env.REACT_APP_API_URL }} -t $IMAGE .
          docker push $IMAGE
          echo "NEW_IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Update ECS Task Definition
        id: taskdef
        run: |
          # Get existing task def JSON
          aws ecs describe-task-definition \
            --task-definition $ECS_TASK_FAMILY \
            --query taskDefinition > task-def.json

          # Clean out unnecessary fields
          cat task-def.json | jq 'del(
            .taskDefinitionArn,
            .revision,
            .status,
            .requiresAttributes,
            .compatibilities,
            .registeredAt,
            .registeredBy
          )' > new-task-def.json

          # Inject new image
          jq --arg IMAGE "$NEW_IMAGE" \
            '.containerDefinitions[0].image = $IMAGE' new-task-def.json \
            > final-task-def.json

          # Register new revision and capture ARN
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://final-task-def.json \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)

          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition $NEW_TASK_DEF_ARN \
            --force-new-deployment
